<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cpy.mapper.UserMapper">
    <sql id="allColumns">
        id,username,birthday,sex,address
    </sql>
    <select id="selectAll" resultType="users">
        select <include refid="allColumns"/> from users
    </select>

<!--    根据id查询-->
    <select id="getById" resultType="users" parameterType="_int">
        select id,username,birthday,sex,address from users where id=#{id}
    </select>

<!--    更新用户-->
    <update id="update" parameterType="users">
        update student set username=#{userName},birthday=#{birthday},sex=#{sex},address=#{address}
        where id=#{id}
    </update>

<!--    优化后的模糊查询 使用 concat函数进行字符串拼接-->
    <select id="likeGet" resultType="users" parameterType="string">
        select id,username,birthday,sex,address
        from users
        where username like concat('%',#{name},'%')
    </select>

<!--    likeGetPlus  模糊查询地址和或者姓名都行  用到了${}进行字符串替换
            List<Users> likeGetPlus(
            @Param("lie")
            String type ,
            @Param("value")
            String value);-->
    <select id="likeGetPlus" resultType="users">
        select id,username,birthday,sex,address
        from users
        where ${lie} like concat('%',#{value},'%')
    </select>

<!--    插入一条数据并返回主键值  使用了 selectKey 标签-->
    <insert id="insert" parameterType="users">
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            select last_insert_id()
        </selectKey>
        insert into users (username,birthday,sex,address)
        values (#{userName},#{birthday},#{sex},#{address})
    </insert>

    <select id="selectMore" resultType="users" parameterType="users">
        select <include refid="allColumns"></include>
        from users
        <where>
            <if test="userName != null and userName != ''">
                and username like concat('%',#{userName},'%')
            </if>
            <if test="birthday != null">
                and birthday = #{birthday}
            </if>
            <if test="sex != null and sex != ''">
                and sex = #{sex}
            </if>
            <if test="address != null and address != ''">
                and address like concat('%',#{address},'%')
            </if>

        </where>
    </select>



<!--    update 按照给的参数更新数据库-->
    <update id="updateNew" parameterType="users">
        update users
        <set>
            <if test="userName != null and userName != ''">
                username = #{userName},
            </if>
            <if test="birthday != null">
                birthday = #{birthday},
            </if>
            <if test="sex != null and sex != ''">
                sex = #{sex},
            </if>
            <if test="address != null and address != ''">
                address = #{address},
            </if>
        </set>
        where id = #{id}
    </update>

<!--    List<Users> getByIds(Integer[] arr);-->
    <select id="getByIds" resultType="users">
        select <include refid="allColumns"></include>
        from users
        where id in
            <foreach collection="array" item="id" separator="," open="(" close=")">#{id}
            </foreach>
    </select>

<!--    int deleteBatch(Integer[] arr);-->
    <delete id="deleteBatch" >
        delete from users
        where id in
        <foreach collection="array" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>

<!--    //    批量增加
       int inserts(List<Users> user);   -->
    <insert id="inserts" >
        insert into users(username,birthday,sex,address)
        values
                <foreach collection="list" item="u" separator=",">
                    (#{u.userName},#{u.birthday},#{u.sex},#{u.address})
                </foreach>

    </insert>


<!--    getByBirthday-->
    <select id="getByBirthday" resultType="users">
        select <include refid="allColumns"></include>
        from users
        where birthday between #{arg0} and #{arg1}
    </select>

<!--    getByMap-->
    <select id="getByMap" resultType="users">
        select <include refid="allColumns"></include>
        from users
        where birthday between #{arg0} and #{arg1}
    </select>

<!--    返回值是map-->
    <select id="getResMap" parameterType="int" resultType="map">
        select username,address from users where id=#{id}
    </select>

    <select id="getMaps" resultType="map">
        select username,address from users
    </select>
</mapper>