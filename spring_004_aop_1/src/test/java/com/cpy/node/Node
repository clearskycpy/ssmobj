AOP  面向切面编程
就是将公共的通用的重复的代码独立开发 在需要的时候反射回去 底层的原理是动态代理

IOC 控制反转 是一种思想 一种思想 由spring进行对象的创建和依赖注入 程序员使用的时候直接取出
    正转 有程序员创建对象{new}
            缺点
    反转
        有spring容器创建对象和依赖注入，将控制权给spring容器 反射机制

IOC <bean id="stu" class="com.cpy.pojo.Student></bean>     set方法注入 <property name="age" value="12"></property>
       1.给创建的对象赋值
         使用set注入 或者构造方法注入  ref 是依赖注入 根据xml的bean里面的的工厂中有就可以注入
       2.
       3.使用三层架构开发
            spring会接管那些对象的创建？
            除了实体类之外的所有的类
          非spring的三层结构
            pojo Users
            dao UsersMapper
            UsersMapperImpl
            业务逻辑层
            UsersService - impl
            界面层
            UsersController

            使用构造方法注入
            1. 使用构造方法的参数注入
            2.使用构造方法的参数的下标注入值
            3.使用默认的构造方法的参数的顺序注入值
  2.基于注解的ioc 也叫做di 是ioc具体实现的技术  要在配置文件中添加包扫描
     使用注解进行对象创建和依赖注入
     创建对象的注解
        @Component  创建任意对象 默认是小写名字 也可以指定 （“value”）
        @Controller ：专门用来创建控制器对象 ，这种对象可以用来接收用户请求
        @Service 用于创建业务逻辑层对象。向下访问持久层 处理结果完毕返回给界面层
        @Repository 专门用于创建数据访问层的对象 负责数据库中的增删改查所有操作
     依赖注入的注解
        @Value 用来给简单类型注入
        @Autowired 使用类型注入值，从整个bean工厂 的同源类型的对象进行注入
           同源类型  school 对应的school 相同
           B 父子类也可以
           B 具有实现类 和实现类关系
        @Qualifier 使用名称注入值
  3.Application配置文件的拆分
        当application配置问价太多的时候项目结构复杂 。我们应该使用
         1.1 按层拆分
         1.2 按功能拆分的方式对文件进行拆分 。 由于拆分成多个配置文件之后 在创建ApplicationContext只能填一个参数
         我们需要使用另外一个配置文件对当前的拆分文件进行整合 这个时候 参数就是 这个整合的配置文件，代替了其他的配置文件

AOP 面向切面编程
 1. 切面  ： 公共的通用的重复的 ，面向切面编程就是将切面提取出来。 通过动态代理抽取出来
        1.1 手写AOP框架
            业务：图书购买业务
            切面 ： 事务
            第一个版本 业务和切面紧耦合
            使用子类代理
            使用静态代理
            使用spring进行管理
            切面接口  然后具体实现这个切面接口  不同的实现对应不同的功能 类中的成员变量设计为接口 传进来的不同的对象实现就变得灵活了
        1.2spring的原生AOP
            Before通知
            After通知
            Throws通知
            Around通知拦截目标对象的方法的调用
        1.3 AOP常用的术语
            切面：就是公共的重复的通用的功能 称之为切面
            连接点；就是目标方法
            切入点 ：多个连接点构成切入点
            目标对象 ：
            通知 指定切入的时机 指定切入的位置
        1.4 面向切面的框架————> 《《AspectJ》》
            AspectJ是一个优秀的面向切面的框架，扩展了java语言  提供了强大的切面实现 ，因为基于java实现的
            易学易用
                常见的通知类型
                   1 前置通知（@Before） ： 目标方法执行前通知
                     在目标方法执行前执行
                    2后置通知（@AfterReturning）目标方法执行后通知
                     3环绕通知（@around）事务就是环绕通知
                    4。最终通知（@After）无论方法执行
                    5。定义切入点（@Pointcut）
            AspectJ的切入点表达式
                规范的公式
                execution(访问权限 方法返回值 方法声明（参数） 异常类型)
                简化后的公式
                execution( 方法返回值 方法声明（参数） )
                用到的符号
                 * 任意个字符
                 .. 出现在方法中表示任意个参数
                        或者子路径
                 例如
                 execution（public * * （。。））  任意公共的方法






